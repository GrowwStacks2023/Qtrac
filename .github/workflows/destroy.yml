name: Destroy Infrastructure Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod
      confirmation:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string
      force_destroy:
        description: 'Force destroy (skip some safety checks)'
        required: false
        type: boolean
        default: false

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  validate-destroy-request:
    runs-on: ubuntu-latest
    outputs:
      should-destroy: ${{ steps.validate.outputs.should-destroy }}
      environment: ${{ steps.validate.outputs.environment }}
    
    steps:
      - name: Validate Destroy Request
        id: validate
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DESTROY" ]; then
            echo "Invalid confirmation. You must type 'DESTROY' exactly."
            echo "should-destroy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          ENV="${{ github.event.inputs.environment }}"
          
          if [[ ! "$ENV" =~ ^(dev|test|prod)$ ]]; then
            echo "Invalid environment: $ENV"
            echo "should-destroy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "Validation passed"
          echo "Environment: $ENV"
          
          echo "should-destroy=true" >> $GITHUB_OUTPUT
          echo "environment=$ENV" >> $GITHUB_OUTPUT

  destroy-infrastructure:
    needs: validate-destroy-request
    runs-on: ubuntu-latest
    if: needs.validate-destroy-request.outputs.should-destroy == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init
          echo "Terraform initialized for ${{ needs.validate-destroy-request.outputs.environment }} environment"

      - name: Setup Environment Variables
        working-directory: ./terraform
        run: |
          ENV="${{ needs.validate-destroy-request.outputs.environment }}"
          echo "Setting up for environment: $ENV"
          
          if [ -d "environments/$ENV" ]; then
            echo "Found environment folder: environments/$ENV"
            ls -la "environments/$ENV/"
          else
            echo "Environment folder not found: environments/$ENV"
            exit 1
          fi

      - name: Terraform Plan Destroy
        working-directory: ./terraform
        run: |
          echo "Planning destroy for ${{ needs.validate-destroy-request.outputs.environment }} environment..."
          ENV="${{ needs.validate-destroy-request.outputs.environment }}"
          terraform plan -destroy -var-file="environments/$ENV/terraform.tfvars" -out=destroy-plan
          terraform show -no-color destroy-plan > destroy-plan.txt
          echo "Destroy plan completed"

      - name: Terraform Destroy
        working-directory: ./terraform
        run: |
          echo "Destroying ${{ needs.validate-destroy-request.outputs.environment }} environment..."
          terraform apply -destroy -auto-approve destroy-plan
          echo "Infrastructure destroyed successfully"

      - name: Manual Cleanup (if needed)
        if: failure()
        run: |
          echo "Terraform destroy failed. Attempting manual cleanup..."
          ENV="${{ needs.validate-destroy-request.outputs.environment }}"
          
          az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID"
          az account set --subscription "$ARM_SUBSCRIPTION_ID"
          
          echo "Attempting to delete resources for environment: $ENV"
          
          az vm delete --name "brisklearning-${ENV}-vm" --resource-group "palash" --yes || true
          az network nic delete --name "brisklearning-${ENV}-vm-nic" --resource-group "palash" || true
          az network public-ip delete --name "brisklearning-${ENV}-vm-ip" --resource-group "palash" || true
          az network nsg delete --name "brisklearning-${ENV}-vm-nsg" --resource-group "palash" || true
          az network vnet subnet delete --name "brisklearning-${ENV}-vm-subnet" --vnet-name "brisklearning-${ENV}-vnet" --resource-group "palash" || true
          az network vnet delete --name "brisklearning-${ENV}-vnet" --resource-group "palash" || true
          az keyvault delete --name "brisklearning-${ENV}-kv" --resource-group "palash" || true
          az keyvault purge --name "brisklearning-${ENV}-kv" || true
          az storage account delete --name "brisklearning${ENV}storage" --resource-group "palash" --yes || true
          
          echo "Manual cleanup attempted."
