name: Destroy Infrastructure Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod
      confirmation:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string
      force_destroy:
        description: 'Force destroy (skip some safety checks)'
        required: false
        type: boolean
        default: false

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  validate-destroy-request:
    runs-on: ubuntu-latest
    outputs:
      should-destroy: ${{ steps.validate.outputs.should-destroy }}
      environment: ${{ steps.validate.outputs.environment }}
      tf-path: ${{ steps.validate.outputs.tf-path }}
    
    steps:
      - name: Validate Destroy Request
        id: validate
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DESTROY" ]; then
            echo "❌ Invalid confirmation. You must type 'DESTROY' exactly."
            echo "should-destroy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          ENV="${{ github.event.inputs.environment }}"
          
          case $ENV in
            dev)
              TF_PATH="terraform/environments/dev"
              ;;
            test)
              TF_PATH="terraform/environments/test"
              ;;
            prod)
              TF_PATH="terraform/environments/prod"
              ;;
            *)
              echo "❌ Invalid environment: $ENV"
              echo "should-destroy=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac
          
          echo "✅ Validation passed"
          echo "Environment: $ENV"
          echo "Terraform Path: $TF_PATH"
          
          echo "should-destroy=true" >> $GITHUB_OUTPUT
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "tf-path=$TF_PATH" >> $GITHUB_OUTPUT

      - name: Production Safety Check
        if: github.event.inputs.environment == 'prod' && github.event.inputs.force_destroy == false
        run: |
          echo "��� **PRODUCTION DESTROY ATTEMPT**" >> $GITHUB_STEP_SUMMARY
          echo "This is a PRODUCTION environment destroy request." >> $GITHUB_STEP_SUMMARY
          echo "Production destroys require manual review." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If you really need to destroy production:" >> $GITHUB_STEP_SUMMARY
          echo "1. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Check 'Force destroy' option" >> $GITHUB_STEP_SUMMARY
          echo "3. Get approval from team lead" >> $GITHUB_STEP_SUMMARY
          exit 1

  destroy-infrastructure:
    needs: validate-destroy-request
    runs-on: ubuntu-latest
    if: needs.validate-destroy-request.outputs.should-destroy == 'true'
    environment: 
      name: ${{ needs.validate-destroy-request.outputs.environment }}-destroy
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Pre-Destroy Backup (for important environments)
        if: github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'test'
        working-directory: ${{ needs.validate-destroy-request.outputs.tf-path }}
        run: |
          echo "��� Creating backup of current state..."
          terraform init
          terraform show > pre-destroy-state-backup-$(date +%Y%m%d-%H%M%S).txt
          echo "✅ State backup created"

      - name: Terraform Init
        working-directory: ${{ needs.validate-destroy-request.outputs.tf-path }}
        run: |
          terraform init
          echo "✅ Terraform initialized for ${{ needs.validate-destroy-request.outputs.environment }} environment"

      - name: Terraform Plan Destroy
        working-directory: ${{ needs.validate-destroy-request.outputs.tf-path }}
        run: |
          echo "��� Planning destroy for ${{ needs.validate-destroy-request.outputs.environment }} environment..."
          terraform plan -destroy -out=destroy-plan
          terraform show -no-color destroy-plan > destroy-plan.txt
          echo "✅ Destroy plan completed"

      - name: Display Destroy Plan
        working-directory: ${{ needs.validate-destroy-request.outputs.tf-path }}
        run: |
          echo "## ���️ Destroy Plan for ${{ needs.validate-destroy-request.outputs.environment }} Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Resources to be DESTROYED:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -n 100 destroy-plan.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Final Confirmation Wait
        run: |
          echo "⏰ Waiting 30 seconds before destroy..."
          echo "This gives you time to cancel if needed."
          echo "❌ To cancel: Go to Actions tab and cancel this workflow"
          sleep 30
          echo "✅ Proceeding with destroy..."

      - name: Terraform Destroy
        working-directory: ${{ needs.validate-destroy-request.outputs.tf-path }}
        run: |
          echo "���️ Destroying ${{ needs.validate-destroy-request.outputs.environment }} environment..."
          terraform apply -destroy -auto-approve destroy-plan
          echo "✅ Infrastructure destroyed successfully"

      - name: Verify Destruction
        working-directory: ${{ needs.validate-destroy-request.outputs.tf-path }}
        run: |
          echo "��� Verifying resources are destroyed..."
          terraform show > post-destroy-state.txt
          
          if [ -s post-destroy-state.txt ]; then
            echo "⚠️ Some resources may still exist"
            cat post-destroy-state.txt
          else
            echo "✅ All resources confirmed destroyed"
          fi

      - name: Cleanup State Files (Optional)
        if: github.event.inputs.force_destroy == true
        working-directory: ${{ needs.validate-destroy-request.outputs.tf-path }}
        run: |
          echo "��� Cleaning up Terraform state files..."
          # Be careful with this - only enable if you're sure
          # rm -f terraform.tfstate*
          echo "⚠️ State file cleanup skipped for safety"

      - name: Destroy Summary
        run: |
          echo "## ��� Destruction Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.validate-destroy-request.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Destroyed At:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ��� Resources Destroyed:" >> $GITHUB_STEP_SUMMARY
          
          ENV_NUM=""
          if [ "${{ needs.validate-destroy-request.outputs.environment }}" = "dev" ]; then
            ENV_NUM="1"
          elif [ "${{ needs.validate-destroy-request.outputs.environment }}" = "test" ]; then
            ENV_NUM="2"
          else
            ENV_NUM="3"
          fi
          
          echo "- Virtual Machine: githubtest${ENV_NUM}-vm" >> $GITHUB_STEP_SUMMARY
          echo "- Public IP: githubtest${ENV_NUM}-ip" >> $GITHUB_STEP_SUMMARY
          echo "- Storage Account: githubtest${ENV_NUM}storage" >> $GITHUB_STEP_SUMMARY
          echo "- Key Vault: githubtest${ENV_NUM}-kv" >> $GITHUB_STEP_SUMMARY
          echo "- Virtual Network: githubtest${ENV_NUM}-vnet" >> $GITHUB_STEP_SUMMARY
          echo "- Network Security Groups and related resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "��� **Cost Impact:** Resources are no longer incurring charges" >> $GITHUB_STEP_SUMMARY

  destroy-failed:
    needs: [validate-destroy-request, destroy-infrastructure]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Destroy Failed Notification
        run: |
          echo "❌ **DESTROY FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.validate-destroy-request.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Failed At:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ��� Troubleshooting Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the workflow logs for specific error messages" >> $GITHUB_STEP_SUMMARY
          echo "2. Some resources may have dependencies preventing deletion" >> $GITHUB_STEP_SUMMARY
          echo "3. Manual cleanup may be required in Azure portal" >> $GITHUB_STEP_SUMMARY
          echo "4. Check for resources with delete locks or protection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ���️ Manual Cleanup Commands:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Connect to Azure and manually delete specific resources if needed" >> $GITHUB_STEP_SUMMARY
          echo "az login" >> $GITHUB_STEP_SUMMARY
          echo "# List resources by tag to find environment-specific ones" >> $GITHUB_STEP_SUMMARY
          echo "az resource list --tag Environment=${{ needs.validate-destroy-request.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
