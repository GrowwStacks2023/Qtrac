name: Deploy BriskLearning Infrastructure

on:
  push:
    paths:
      - 'deploy-trigger.txt'
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test  
        - prod

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      target-environment: ${{ steps.parse-trigger.outputs.environment }}
      should-deploy: ${{ steps.parse-trigger.outputs.should-deploy }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Parse Trigger File or Manual Input
        id: parse-trigger
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Manual deployment to ${{ github.event.inputs.environment }}"
          elif [ -f deploy-trigger.txt ]; then
            LATEST_LINE=$(grep -E "^(DEV|TEST|PROD):" deploy-trigger.txt | tail -n 1)
            if [ -n "$LATEST_LINE" ]; then
              TARGET_ENV=$(echo "$LATEST_LINE" | cut -d':' -f1 | tr '[:upper:]' '[:lower:]')
              echo "environment=$TARGET_ENV" >> $GITHUB_OUTPUT
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "Deploying to $TARGET_ENV via trigger file"
            else
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: detect-environment
    runs-on: ubuntu-latest
    if: needs.detect-environment.outputs.should-deploy == 'true'
    environment: ${{ needs.detect-environment.outputs.target-environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform workspace select ${{ needs.detect-environment.outputs.target-environment }} || terraform workspace new ${{ needs.detect-environment.outputs.target-environment }}
          terraform plan -var-file="environments/${{ needs.detect-environment.outputs.target-environment }}/terraform.tfvars" -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply tfplan

      - name: Get Outputs
        id: terraform-outputs
        working-directory: ./terraform
        run: |
          echo "vm_public_ip=$(terraform output -raw vm_public_ip)" >> $GITHUB_OUTPUT
          echo "main_website_url=$(terraform output -raw main_website_url)" >> $GITHUB_OUTPUT
          echo "n8n_url=$(terraform output -raw n8n_url)" >> $GITHUB_OUTPUT

      - name: Display DNS Configuration
        run: |
          echo "## Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.detect-environment.outputs.target-environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**VM IP:** ${{ steps.terraform-outputs.outputs.vm_public_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### DNS Records to Configure:" >> $GITHUB_STEP_SUMMARY
          echo "Create these A records in your DNS provider:" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.detect-environment.outputs.target-environment }}.brisklearning.com → ${{ steps.terraform-outputs.outputs.vm_public_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- n8n.${{ needs.detect-environment.outputs.target-environment }}.brisklearning.com → ${{ steps.terraform-outputs.outputs.vm_public_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- api.${{ needs.detect-environment.outputs.target-environment }}.brisklearning.com → ${{ steps.terraform-outputs.outputs.vm_public_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URLs (after DNS propagation):" >> $GITHUB_STEP_SUMMARY
          echo "- Main Site: ${{ steps.terraform-outputs.outputs.main_website_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- n8n Interface: ${{ steps.terraform-outputs.outputs.n8n_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: http://${{ steps.terraform-outputs.outputs.vm_public_ip }}:8080/health" >> $GITHUB_STEP_SUMMARY
