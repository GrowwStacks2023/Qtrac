#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose
  - clamav
  - clamav-daemon
  - postgresql-client
  - curl
  - wget
  - unzip
  - jq

groups:
  - docker

users:
  - default
  - name: azureuser
    groups: docker
    shell: /bin/bash

write_files:
  - path: /home/azureuser/.env
    content: |
      # BriskLearning Configuration
      DOMAIN=${domain_name}
      EMAIL=${ssl_email}
      ENVIRONMENT=${environment}
      
      # PostgreSQL Configuration (Existing Server)
      PGHOST=${postgres_host}
      PGUSER=${postgres_user}
      PGPASSWORD=${postgres_password}
      PGDATABASE=${postgres_database}
      PGPORT=${postgres_port}
      POSTGRES_CONNECTION=${postgres_connection_string}
      
      # Azure Storage
      AZURE_STORAGE_ACCOUNT=${storage_account_name}
      AZURE_STORAGE_KEY=${storage_account_key}

  - path: /home/azureuser/docker-compose.yml
    content: |
      version: '3.8'
      services:
        caddy:
          image: caddy:2-alpine
          container_name: caddy
          restart: unless-stopped
          ports:
            - "80:80"
            - "443:443"
            - "8080:8080"
          volumes:
            - ./Caddyfile:/etc/caddy/Caddyfile
            - caddy_data:/data
            - caddy_config:/config
            - ./logs:/var/log/caddy
            - /home/azureuser/shared-files:/var/www/uploads
          networks:
            - web-network
          environment:
            - DOMAIN=${domain_name}
            - EMAIL=${ssl_email}
            - ENVIRONMENT=${environment}

        n8n:
          image: n8nio/n8n:latest
          container_name: n8n
          restart: unless-stopped
          environment:
            - DB_TYPE=postgresdb
            - DB_POSTGRESDB_HOST=${postgres_host}
            - DB_POSTGRESDB_PORT=${postgres_port}
            - DB_POSTGRESDB_DATABASE=${postgres_database}
            - DB_POSTGRESDB_USER=${postgres_user}
            - DB_POSTGRESDB_PASSWORD=${postgres_password}
            - DB_POSTGRESDB_SSL_MODE=require
            - N8N_BASIC_AUTH_ACTIVE=true
            - N8N_BASIC_AUTH_USER=admin
            - N8N_BASIC_AUTH_PASSWORD=BriskLearning2024!
            - N8N_HOST=0.0.0.0
            - N8N_PORT=5678
            - N8N_PROTOCOL=https
            - WEBHOOK_URL=https://$${ENVIRONMENT}.$${DOMAIN}/
            - N8N_EDITOR_BASE_URL=https://n8n.$${ENVIRONMENT}.$${DOMAIN}/
            - GENERIC_TIMEZONE=Asia/Kolkata
          volumes:
            - n8n_data:/home/node/.n8n
            - /home/azureuser/shared-files:/shared-files
          networks:
            - web-network
            - internal-network

        clamav:
          image: clamav/clamav:latest
          container_name: clamav
          restart: unless-stopped
          volumes:
            - clamav_data:/var/lib/clamav
            - /home/azureuser/shared-files:/scan-files
          networks:
            - internal-network
          healthcheck:
            test: ["CMD", "clamdscan", "--ping"]
            interval: 60s
            timeout: 10s
            retries: 3

        file-processor:
          image: python:3.9-slim
          container_name: file-processor
          restart: unless-stopped
          working_dir: /app
          command: sh -c "pip install -r requirements.txt && python file_processor.py"
          volumes:
            - /home/azureuser/file-processor:/app
            - /home/azureuser/shared-files:/shared-files
          environment:
            - PGHOST=${postgres_host}
            - PGUSER=${postgres_user}
            - PGPASSWORD=${postgres_password}
            - PGDATABASE=${postgres_database}
            - PGPORT=${postgres_port}
            - POSTGRES_CONNECTION=${postgres_connection_string}
            - AZURE_STORAGE_ACCOUNT=${storage_account_name}
            - AZURE_STORAGE_KEY=${storage_account_key}
            - CLAMAV_HOST=clamav
            - CLAMAV_PORT=3310
            - ENVIRONMENT=${environment}
          networks:
            - internal-network
          depends_on:
            - clamav

        web-app:
          image: nginx:alpine
          container_name: web-app
          restart: unless-stopped
          volumes:
            - ./web-app:/usr/share/nginx/html
            - ./nginx.conf:/etc/nginx/nginx.conf
          networks:
            - web-network

      volumes:
        n8n_data:
        clamav_data:
        caddy_data:
        caddy_config:

      networks:
        web-network:
          driver: bridge
        internal-network:
          driver: bridge

  - path: /home/azureuser/Caddyfile
    content: |
      # Main domain with environment subdomain
      $${ENVIRONMENT}.$${DOMAIN} {
          tls $${EMAIL}
          
          reverse_proxy web-app:80
          
          handle_path /upload/* {
              file_server {
                  root /var/www/uploads
                  browse
              }
          }
          
          handle_path /api/* {
              reverse_proxy web-app:80
          }
          
          header {
              Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
              X-Content-Type-Options "nosniff"
              X-Frame-Options "DENY"
              X-XSS-Protection "1; mode=block"
              Referrer-Policy "strict-origin-when-cross-origin"
              -Server
          }
          
          rate_limit {
              zone dynamic {
                  key {remote_host}
                  events 100
                  window 1m
              }
          }
          
          log {
              output file /var/log/caddy/access.log
              format console
          }
      }

      # n8n subdomain with environment
      n8n.$${ENVIRONMENT}.$${DOMAIN} {
          tls $${EMAIL}
          
          reverse_proxy n8n:5678 {
              header_up Connection {>Connection}
              header_up Upgrade {>Upgrade}
          }
          
          header {
              Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
              X-Content-Type-Options "nosniff"
              X-Frame-Options "SAMEORIGIN"
          }
      }

      # API subdomain with environment
      api.$${ENVIRONMENT}.$${DOMAIN} {
          tls $${EMAIL}
          
          handle_path /webhook/* {
              reverse_proxy n8n:5678
          }
          
          handle_path /form/* {
              reverse_proxy web-app:80
          }
          
          header {
              Access-Control-Allow-Origin "*"
              Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
              Access-Control-Allow-Headers "Content-Type, Authorization"
          }
          
          @options method OPTIONS
          respond @options 204
      }

      # Main domain (production redirect)
      $${DOMAIN} {
          tls $${EMAIL}
          
          @prod `$${ENVIRONMENT} == "prod"`
          handle @prod {
              reverse_proxy web-app:80
          }
          
          @not_prod `$${ENVIRONMENT} != "prod"`
          handle @not_prod {
              redir https://$${ENVIRONMENT}.$${DOMAIN}{uri} permanent
          }
      }

      # Health check endpoint
      :8080 {
          handle /health {
              respond "BriskLearning $${ENVIRONMENT} Environment: OK" 200
          }
          
          handle /metrics {
              reverse_proxy web-app:80
          }
      }

  - path: /home/azureuser/web-app/index.html
    content: |
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>BriskLearning Data Processing Platform</title>
          <style>
              body { 
                  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                  margin: 0; 
                  padding: 40px; 
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  color: #333;
              }
              .container {
                  max-width: 800px;
                  margin: 0 auto;
                  background: white;
                  padding: 40px;
                  border-radius: 10px;
                  box-shadow: 0 10px 30px rgba(0,0,0,0.2);
              }
              h1 { 
                  color: #4a5568; 
                  text-align: center;
                  margin-bottom: 30px;
              }
              .upload-form { 
                  max-width: 500px; 
                  margin: 20px auto;
                  padding: 20px;
                  border: 1px solid #e2e8f0;
                  border-radius: 8px;
              }
              .form-group { margin: 15px 0; }
              label { 
                  display: block; 
                  margin-bottom: 5px; 
                  font-weight: 600;
                  color: #4a5568;
              }
              input, textarea, select { 
                  width: 100%; 
                  padding: 12px; 
                  margin-bottom: 10px;
                  border: 1px solid #cbd5e0;
                  border-radius: 4px;
                  font-size: 14px;
              }
              button { 
                  background: #4299e1; 
                  color: white; 
                  padding: 12px 24px; 
                  border: none; 
                  border-radius: 4px;
                  cursor: pointer;
                  font-size: 16px;
                  font-weight: 600;
                  transition: background 0.3s;
              }
              button:hover { background: #3182ce; }
              .env-badge {
                  display: inline-block;
                  background: #38a169;
                  color: white;
                  padding: 4px 12px;
                  border-radius: 20px;
                  font-size: 12px;
                  font-weight: bold;
                  text-transform: uppercase;
                  margin-left: 10px;
              }
              .links { margin-top: 40px; }
              .links a { 
                  color: #4299e1; 
                  text-decoration: none;
                  margin-right: 20px;
                  font-weight: 600;
              }
              .links a:hover { text-decoration: underline; }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>BriskLearning Data Processing Platform <span class="env-badge">$${ENVIRONMENT}</span></h1>
              
              <h2>File Upload</h2>
              <form class="upload-form" action="/api/upload" method="post" enctype="multipart/form-data">
                  <div class="form-group">
                      <label>Select File:</label>
                      <input type="file" name="file" required>
                  </div>
                  <div class="form-group">
                      <label>File Category:</label>
                      <select name="category">
                          <option value="document">Document</option>
                          <option value="image">Image</option>
                          <option value="data">Data File</option>
                          <option value="other">Other</option>
                      </select>
                  </div>
                  <button type="submit">Upload File</button>
              </form>
              
              <h2>Data Entry Form</h2>
              <form class="upload-form" action="/api/form/submit" method="post">
                  <div class="form-group">
                      <label>Organization Name:</label>
                      <input type="text" name="organization" required>
                  </div>
                  <div class="form-group">
                      <label>Contact Email:</label>
                      <input type="email" name="email" required>
                  </div>
                  <div class="form-group">
                      <label>Data Description:</label>
                      <textarea name="description" rows="4" required></textarea>
                  </div>
                  <button type="submit">Submit Data</button>
              </form>
              
              <div class="links">
                  <h2>System Links</h2>
                  <a href="https://n8n.$${ENVIRONMENT}.$${DOMAIN}" target="_blank">n8n Workflow Manager</a>
                  <a href="/health">System Health Check</a>
                  <a href="https://api.$${ENVIRONMENT}.$${DOMAIN}/webhook/test">Test Webhook</a>
              </div>
          </div>
      </body>
      </html>

  - path: /home/azureuser/nginx.conf
    content: |
      events {
          worker_connections 1024;
      }
      
      http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          
          client_max_body_size 100M;
          client_body_timeout 120s;
          
          server {
              listen 80;
              server_name _;
              
              root /usr/share/nginx/html;
              index index.html;
              
              location /api/upload {
                  proxy_pass http://file-processor:8000/upload;
                  proxy_set_header Host $$host;
                  proxy_set_header X-Real-IP $$remote_addr;
                  proxy_set_header X-Environment "$${ENVIRONMENT}";
              }
              
              location /api/form {
                  proxy_pass http://file-processor:8000/form;
                  proxy_set_header Host $$host;
                  proxy_set_header X-Real-IP $$remote_addr;
                  proxy_set_header X-Environment "$${ENVIRONMENT}";
              }
              
              location /health {
                  return 200 'BriskLearning $${ENVIRONMENT} Environment: OK';
                  add_header Content-Type text/plain;
              }
              
              location / {
                  try_files $$uri $$uri/ /index.html;
              }
          }
      }

  - path: /home/azureuser/setup.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      
      echo "Starting BriskLearning setup for $${ENVIRONMENT} environment..."
      
      # Create necessary directories
      mkdir -p /home/azureuser/shared-files/{incoming,processed,quarantine}
      mkdir -p /home/azureuser/file-processor
      mkdir -p /home/azureuser/web-app
      mkdir -p /home/azureuser/logs
      
      # Set ownership
      chown -R azureuser:azureuser /home/azureuser/
      
      # Load environment variables
      source /home/azureuser/.env
      
      # Substitute environment variables in all config files
      cd /home/azureuser
      envsubst < docker-compose.yml > docker-compose-final.yml
      mv docker-compose-final.yml docker-compose.yml
      
      envsubst < Caddyfile > Caddyfile-final
      mv Caddyfile-final Caddyfile
      
      envsubst < web-app/index.html > web-app/index-final.html
      mv web-app/index-final.html web-app/index.html
      
      envsubst < nginx.conf > nginx-final.conf
      mv nginx-final.conf nginx.conf
      
      # Test PostgreSQL connectivity
      echo "Testing PostgreSQL connectivity..."
      psql "$$POSTGRES_CONNECTION" -c "SELECT version();" || echo "Warning: Could not connect to PostgreSQL"
      
      # Start services
      echo "Starting Docker services..."
      docker-compose up -d
      
      # Wait for services to start
      echo "Waiting for services to initialize..."
      sleep 60
      
      # Install Python dependencies for file processor
      echo "Installing file processor dependencies..."
      docker exec file-processor pip install -r /app/requirements.txt
      
      echo "BriskLearning $${ENVIRONMENT} environment setup complete!"
      echo "Access your platform at: https://$${ENVIRONMENT}.$${DOMAIN}"
      echo "Access n8n at: https://n8n.$${ENVIRONMENT}.$${DOMAIN}"
      echo "API webhooks at: https://api.$${ENVIRONMENT}.$${DOMAIN}"

runcmd:
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker azureuser
  - systemctl enable clamav-daemon
  - systemctl start clamav-daemon
  - freshclam
  - sleep 30
  - /home/azureuser/setup.sh

final_message: "BriskLearning data processing platform ready with environment-specific subdomains"
